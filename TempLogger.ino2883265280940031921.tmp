/*
  MySQL Temperature Logger
  Version 0.2
  Reading temperature with LM35 sensor and logging to MySQL Database every 5 secconds.
*/

// include the library code:
// Library for LCD Display
#include <LiquidCrystal.h>
// Library for Ethernet Shield
#include <SPI.h>
#include <Ethernet.h>
// Library for MySQL Connection
#include <sha1.h>
#include <mysql.h>

// the media access control (ethernet hardware) address for the shield:
byte mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };
//the IP address for the shield:
byte ip[] = { 192, 168, 55, 5 };
// IP of MySQL Server
IPAddress server_addr(192, 168, 55, 10);
Connector my_conn;
char user[] = "temp_logger_user";
char password[] = "HostnServe123$";
// MySQL Query
char INSERT_SQL[] = "INSERT INTO temp_logger.log (log_temp_c) VALUES ('10')";

// Initialise variables
int numFails = 0;
int maxFails = 5;

// Initialize the library with the numbers of the interface pins
LiquidCrystal lcd(19, 18, 17, 16, 15, 14);

void setup(){
  // Set Up LCD
  lcd.begin(16, 2);
  
  // Set up network connection
  //Ethernet.begin(mac);

  Serial.begin(115200);
  while (!Serial);
  //delay(1000);
  Serial.println("MySQL Temperature Logger");
  
  Serial.println("Establishing network connection...");
  // Print IP address
  if (Ethernet.begin(mac) == 0) {
    Serial.println("Failed to configure Ethernet using DHCP");
    delay(2000);
    softReset();
  } else {
  // print your local IP address:
  Serial.println(Ethernet.localIP());
  }
  
  
  logData();
  
  
}

void logData(){
  lcd.setCursor(0, 0);
  lcd.print("Status:");
  Serial.println("Connecting...");
  clearLine();
  lcd.print("Connecting...");
  if (my_conn.mysql_connect(server_addr, 3306, user, password)){
    Serial.println("Connected!");
    clearLine();
    lcd.print("Connected!");
    my_conn.cmd_query(INSERT_SQL);
    Serial.println("Data inserted.");
    clearLine();
    lcd.print("Data Inserted.");
    delay(2000);
    if (my_conn.is_connected()) {
      Serial.println("Disconnecting...");
      clearLine();
      lcd.print("Disconnecting...");
      my_conn.disconnect();
      //Serial.println("Disconnected!");
      clearLine();
      lcd.print("Disconnected!");
      delay (2000);
      numFails = 0;
    } else {
      Serial.println("Already Disconnected.");
    }
  } else {
    clearLine();
    lcd.print("Failed!");
    Serial.println("Connection failed.");
    numFails++;
    if (numFails == maxFails) {
      Serial.println("Exceeded maximum connection faiilures! Rebooting...");
      clearLine();
      lcd.print("Reached maxFail!");
      delay(1000);
      clearLine();
      lcd.print("Rebooting...");
      delay(2000);
      softReset();
    }
  }
}

void softReset() {
  asm volatile("jmp 0");
}

void clearLine(){
  lcd.setCursor(0, 1);
  lcd.print("                ");
  lcd.setCursor(0, 1);
}

void loop(){

logData();

clearLine();
lcd.print("Connecting in 5");
delay(1000);
clearLine();
lcd.print("Connecting in 4");
delay(1000);
clearLine();
lcd.print("Connecting in 3");
delay(1000);
clearLine();
lcd.print("Connecting in 2");
delay(1000);
clearLine();
lcd.print("Connecting in 1");
delay(1000);

  //printIPAddress();
  //delay(5000); // Loop delay
}
